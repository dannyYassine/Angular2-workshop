{"version":3,"sources":["services/dribbble.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;GAEG;AACH,qBAA+B,eAAe,CAAC,CAAA;AAC/C,qBAA4F,eAAe,CAAC,CAAA;AAC5G,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,6BAA6B,CAAC,CAAA;AACrC,QAAO,yBAAyB,CAAC,CAAA;AAEjC,uCAAqC,yCAAyC,CAAC,CAAA;AAC/E,qBAAmB,gBACnB,CAAC,CADkC;AAEnC;IAEI,yBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAE9B,CAAC;IAEM,kCAAQ,GAAf,UAAgB,IAAgB;QAAhB,oBAAgB,GAAhB,QAAgB;QAE5B,IAAI,YAAY,GAAG,IAAI,sBAAe,EAAE,CAAC;QACzC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1C,IAAI,OAAO,GAAG,IAAI,+CAAsB,CAAC,YAAY,CAAC,CAAC;QAEvD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,mCAAmC,EAAE,OAAO,CAAC;aAC7D,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,IAAI;YACL,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACX,CAAC;IAEM,iCAAO,GAAd,UAAe,MAAc;QAEzB,IAAI,OAAO,GAAG,IAAI,+CAAsB,CAAC,IAAI,sBAAe,EAAE,CAAC,CAAC;QAEhE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,uCAAqC,MAAQ,EAAE,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC,IAAI,EAAE,CAAC;QAEzF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,uCAAqC,MAAQ,EAAE,OAAO,CAAC;aACvE,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,IAAI;YACL,MAAM,CAAC,IAAI,WAAI,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IAEX,CAAC;IAEM,qCAAW,GAAlB,UAAmB,MAAc;QAC7B,IAAI,OAAO,GAAG,IAAI,+CAAsB,CAAC,IAAI,sBAAe,EAAE,CAAC,CAAC;QAEhE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,uCAAqC,MAAM,cAAW,EAAE,OAAO,CAAC;aAChF,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;aAChC,GAAG,CAAC,UAAA,IAAI;YACL,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC,CAAC,CAAC;IACX,CAAC;IAEM,oCAAU,GAAjB;QACI,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;IAC7C,CAAC;IA9CL;QAAC,iBAAU,EAAE;;uBAAA;IAgDb,sBAAC;AAAD,CA/CA,AA+CC,IAAA;AA/CY,uBAAe,kBA+C3B,CAAA","file":"../../app/services/dribbble.service.js","sourcesContent":["/**\n * Created by dannyyassine on 2016-11-15.\n */\nimport { Injectable }     from '@angular/core';\nimport {Http, Response, Headers, RequestOptions, RequestOptionsArgs, URLSearchParams } from '@angular/http';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/toPromise';\nimport 'rxjs/add/operator/catch';\nimport {Observable} from 'rxjs/Rx';\nimport {DribbbleRequestOptions} from '../interfaceImpl/DribbbleRequestOptions';\nimport {Shot} from '../models/Shot'\n@Injectable()\nexport class DribbbleService {\n\n    constructor(private http: Http) {\n\n    }\n\n    public getShots(page: number = 1): Observable<Shot[]> {\n\n        let searchParams = new URLSearchParams();\n        searchParams.set('page', page.toString());\n        let options = new DribbbleRequestOptions(searchParams);\n\n        return this.http.get(`https://api.dribbble.com/v1/shots`, options)\n            .map(response => response.json())\n            .map(json => {\n                return json;\n            });\n    }\n\n    public getShot(shotId: number): Observable<Shot> {\n\n        let options = new DribbbleRequestOptions(new URLSearchParams());\n\n        this.http.get(`https://api.dribbble.com/v1/shots/${shotId}`, options).toPromise().then();\n\n        return this.http.get(`https://api.dribbble.com/v1/shots/${shotId}`, options)\n            .map(response => response.json())\n            .map(json => {\n                return new Shot(json);\n            });\n\n    }\n\n    public getComments(shotId: number): Observable<Array<Comment>> {\n        let options = new DribbbleRequestOptions(new URLSearchParams());\n\n        return this.http.get(`https://api.dribbble.com/v1/shots/${shotId}/comments`, options)\n            .map(response => response.json())\n            .map(json => {\n                return json;\n            });\n    }\n\n    public getCourses(): Array<string> {\n        return [\"Course1\", \"Course2\", \"Course3\"];\n    }\n\n}"]}